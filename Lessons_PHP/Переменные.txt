Переменные

Переменные в PHP представлены знаком доллара с последующим именем переменной.
Правильное имя переменной должно начинаться с буквы или символа подчеркивания и состоять из букв, цифр и символов подчеркивания в любом количестве. Это можно отобразить регулярным выражением: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
Под буквами здесь подразумеваются символы a-z, A-Z, и байты от 127 до 255 (0x7f-0xff).
$this - это особая переменная, которой нельзя ничего присваивать.
<?php
$var = 'Bob';
$Var = 'Joe';
echo "$var, $Var";      // выведет "Bob, Joe"
?>

По умолчанию, переменные всегда присваиваются по значению. 
То есть, когда вы присваиваете выражение переменной, все значение оригинального выражения копируется
в эту переменную. 

после того как одной переменной присвоено значение другой,
изменение одной из них не влияет на другую.

Выражения
самые важные строительные элементы PHP.
"все что угодно, имеющее значение".
Основными формами выражений являются константы и переменные. 
"$a = 5", вы присваиваете '5' переменной $a. 
'5', очевидно, имеет значение 5
 '5' - это целочисленная константа
 здесь присутствуют два значения - значение целочисленной константы '5'
 и значение переменной $a, также принимающей значение 5
 и еще одно значение - значение самого присвоения.
 
 Немного более сложными примерами выражений являются функции. 
 <?php
function foo ()
{
    return 5;
}
?>

$c = foo() абсолютно эквивалентна записи $c = 5
Поскольку foo() возвращает 5, значением выражения 'foo()' является 5. 
Как правило, функции возвращают не просто статическое значение, а что-то вычисляют.

PHP поддерживает четыре типа скалярных значений
- целочисленные (integer)
- с плавающей точкой (float)
- строковые значения (string)
-булевы (boolean)
значения (скалярными являются значения, которые вы не можете 'разбить' на меньшие части,
в отличие, например, от массивов).

PHP поддерживает также два комбинированных (не скалярных) типа: массивы и объекты. 
PHP - это язык, ориентированный на выражения и рассматривающий почти все как выражение. 


префиксный и постфиксный инкремент и декремент.
формой записи variable++ и variable--.
Это операторы инкремента и декремента. 
Декремент NULL также не даст никакого эффекта, однако инкремент даст значение 1.


Операторы инкремента и декремента
++$a	Префиксный инкремент	Увеличивает $a на единицу, затем возвращает значение $a.
$a++	Постфиксный инкремент	Возвращает значение $a, затем увеличивает $a на единицу.
--$a	Префиксный декремент	Уменьшает $a на единицу, затем возвращает значение $a.
$a--	Постфиксный декремент	Возвращает значение $a, затем уменьшает $a на единицу.


<?php
echo "<h3>Постфиксный инкремент</h3>";
$a = 5;
echo "Должно быть 5: " . $a++ . "<br />\n";
echo "Должно быть 6: " . $a . "<br />\n";

echo "<h3>Префиксный инкремент</h3>";
$a = 5;
echo "Должно быть 6: " . ++$a . "<br />\n";
echo "Должно быть 6: " . $a . "<br />\n";

echo "<h3>Постфиксный декремент</h3>";
$a = 5;
echo "Должно быть 5: " . $a-- . "<br />\n";
echo "Должно быть 4: " . $a . "<br />\n";

echo "<h3>Префиксный декремент</h3>";
$a = 5;
echo "Должно быть 4: " . --$a . "<br />\n";
echo "Должно быть 4: " . $a . "<br />\n";
?>



Арифметические операции с символьными переменными
<?php
$i = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$i . "\n";
}
?>

Результат выполнения данного примера:

X
Y
Z
AA
AB
AC


Операторы сравнения
позволяют сравнивать между собой два значения.

Операторы сравнения
$a == $b	Равно	TRUE если $a равно $b после преобразования типов.
$a === $b	Тождественно равно	TRUE если $a равно $b и имеет тот же тип.
$a != $b	Не равно	TRUE если $a не равно $b после преобразования типов.
$a <> $b	Не равно	TRUE если $a не равно $b после преобразования типов.
$a !== $b	Тождественно не равно	TRUE если $a не равно $b или они разных типов.
$a < $b	Меньше	TRUE если $a строго меньше $b.
$a > $b	Больше	TRUE если $a строго больше $b.
$a <= $b	Меньше или равно	TRUE если $a меньше или равно $b.
$a >= $b	Больше или равно	TRUE если $a больше или равно $b.


В случае, если вы сравниваете число со строкой или две строки, содержащие числа, каждая строка будет преобразована в число, 
и сравниваться они будут как числа.
Аналогично и оператор switch. 

Оператор switch подобен серии операторов IF с одинаковым условием.
может понадобиться сравнивать одну и ту же переменную (или выражение) с множеством различных значений,
и выполнять различные участки кода в зависимости от того, какое значение принимает эта переменная (или выражение).


Оператор switch
<?php
if ($i == 0) {
    echo "i равно 0";
} elseif ($i == 1) {
    echo "i равно 1";
} elseif ($i == 2) {
    echo "i равно 2";
}

switch ($i) {
    case 0:
        echo "i равно 0";
        break;
    case 1:
        echo "i равно 1";
        break;
    case 2:
        echo "i равно 2";
        break;
}
?>


Оператор switch допускает сравнение со строками
<?php
switch ($i) {
    case "яблоко":
        echo "i это яблоко";
        break;
    case "шоколадка":
        echo "i это шоколадка";
        break;
    case "пирог":
        echo "i это пирог";
        break;
}
?>


Результатом вычислений являются FALSE (ложь) или TRUE (истина). 
PHP поддерживает операции сравнения > (больше), >= (больше либо равно), == (равно), != (не равно), < (меньше) и <= (меньше либо равно). 
Он также поддерживает операторы строгого равенства: === (равно и одного типа) и !== (не равно или не одного типа).

распространенной практикой является запись вида '$a = $a + 3'. '$a + 3' вычисляется в значение $a плюс 3 и снова присваивается $a, увеличивая в результате $a на 3. 

'$a -= 5' (вычесть 5 из значения $a), '$b *= 7' (умножить значение $b на 7) и т.д.

тернарный условный оператор:
<?php
$first ? $second : $third
?>

Если значением первого подвыражения является TRUE (не ноль), то выполняется второе подвыражение, которое и будет результатом условного выражения. 
В противном случае будет выполнено третье подвыражение и его значение будет результатом.


<?php
function double($i)
{
    return $i*2;
}
$b = $a = 5;        /* присвоить значение пять переменным $a и $b */
$c = $a++;          /* постфиксный инкремент, присвоить значение $a 
                       (5) переменной $c */
$e = $d = ++$b;     /* префиксный инкремент, присвоить увеличенное
                       значение $b (6) переменным $d и $e */

/* в этой точке и $d, и $e равны 6 */

$f = double($d++);  /* присвоить удвоенное значение $d перед
                       инкрементом (2*6 = 12) переменной $f */
$g = double(++$e);  /* присвоить удвоенное значение $e после
                       инкремента (2*7 = 14) переменной $g */
$h = $g += 10;      /* сначала переменная $g увеличивается на 10,
                       приобретая, в итоге, значение 24. Затем значение
                       присвоения (24) присваивается переменной $h,
                       которая в итоге также становится равной 24. */
?>



истинность значения выражений. 
как правило, в условных операторах и циклах, вас может интересовать не конкретное значение выражения, а только его истинность (значение TRUE или FALSE).

Константы TRUE и FALSE (регистро-независимые) - это два возможных булевых значения. 


По умолчанию, переменные всегда присваиваются по значению. 
когда вы присваиваете выражение переменной, все значение оригинального выражения копируется в эту переменную.

PHP также предлагает иной способ присвоения значений переменным: присвоение по ссылке.
Это означает, что новая переменная просто ссылается (иначе говоря, "становится псевдонимом" или "указывает") на оригинальную переменную. 
Изменения в новой переменной отражаются на оригинале, и наоборот.

Для присвоения по ссылке, просто добавьте амперсанд (&) к началу имени присваиваемой (исходной) переменной. 
следующий фрагмент кода дважды выводит 'Меня зовут Боб':
<?php
$foo = 'Боб';              // Присваивает $foo значение 'Боб'
$bar = &$foo;              // Ссылка на $foo через $bar.
$bar = "Меня зовут $bar";  // Изменение $bar...
echo $bar;
echo $foo;                 // меняет и $foo.
?>

по ссылке могут быть присвоены только именованные переменные.


Ссылки. Разъяснения
Ссылки в PHP - это средство доступа к содержимому одной переменной под разными именами.

Есть три основных операции с использованием ссылок:
-  присвоение по ссылке
ссылки PHP позволяют создать две переменные указывающие на одно и тоже значение
<?php
$a =& $b;
?>
$a и $b здесь абсолютно эквивалентны, но это не означает, что $a указывает на $b или наоборот. Это означает, что $a и $b указывают на одно и тоже значение.

-передача по ссылке,
можете передавать переменные в функцию по ссылке, и функция сможет изменять свои аргументы. 

<?php
function foo(&$var)
{
    $var++;
}

$a=5;
foo($a);
// $a здесь равно 6
?>

По ссылке можно передавать:

Переменные, например foo($a)
Оператор new, например foo(new foobar())
Ссылки, возвращаемые функцией,

- возврат по ссылке
используется в тех случаях, когда вы хотите использовать функцию для выбора переменной, с которой должна быть связана данная ссылка.

<?php
class foo {
    public $value = 42;

    public function &getValue() {
        return $this->value;
    }
}

$obj = new foo;
$myValue = &$obj->getValue(); // $myValue указывает на $obj->value, равное 42.
$obj->value = 2;
echo $myValue;                // отобразит новое значение $obj->value, т.е. 2.
?>








