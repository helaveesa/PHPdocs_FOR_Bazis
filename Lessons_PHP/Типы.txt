Типы

PHP поддерживает восемь простых типов.
Четыре скалярных типа:
boolean
Это простейший тип. boolean выражает истинность значения. Он может быть либо TRUE либо FALSE.
<?php
$foo = True; // присвоить $foo значение TRUE
?>

integer
это число из множества ℤ = {..., -2, -1, 0, 1, 2, ...}.
Целые числа
<?php
$a = 1234; // десятичное число
$a = -123; // отрицательное число
$a = 0123; // восьмеричное число (эквивалентно 83 в десятичной системе)
$a = 0x1A; // шестнадцатеричное число (эквивалентно 26 в десятичной системе)
?>
 
 
float (число с плавающей точкой, также известное как double)
также известные как "float", "double", или "real"
<?php
$a = 1.234; 
$b = 1.2e3; 
$c = 7E-10;
?>


string
Строка - это набор символов, где символ - это то же самое, что и байт. 
Строки могут быть размером более 2 Гб.
Простейший способ определить строку - это заключить ее в одинарные кавычки (символ ').
Если строка заключена в двойные кавычки ("), 
PHP распознает большее количество управляющих последовательностей для специальных символов:


Управляющие последовательности:
\n	новая строка (LF или 0x0A (10) в ASCII)
\r	возврат каретки (CR или 0x0D (13) в ASCII)
\t	горизонтальная табуляция (HT или 0x09 (9) в ASCII)
\v	вертикальная табуляция (VT или 0x0B (11) в ASCII) (с версии PHP 5.2.5)
\e	escape-знак (ESC или 0x1B (27) в ASCII) (с версии PHP 5.4.0)
\f	подача страницы (FF или 0x0C (12) в ASCII) (с версии PHP 5.2.5)
\\	обратная косая черта
\$	знак доллара
\"	двойная кавычка
\[0-7]{1,3}	 последовательность символов, соответствующая регулярному выражению символа в восьмеричной системе счисления
\x[0-9A-Fa-f]{1,2}	 последовательность символов, соответствующая регулярному выражению символа в шестнадцатеричной системе счисления




Два смешанных типа:
array
Массивы
это упорядоченное отображение, которое устанавливает соответствие между значением и ключом.
список (вектор)
хэш-таблицу
Определение при помощи array()
Массив (тип array) может быть создан языковой конструкцией array().
В качестве параметров она принимает любое количество разделенных запятыми пар
key => value (ключ => значение).

array(
    key  => value,
    key2 => value2,
    key3 => value3,
    ...
)

<?php
$array = array(
    "foo" => "bar",
    "bar" => "foo",
);

// Начиная с PHP 5.4
$array = [
    "foo" => "bar",
    "bar" => "foo",
];
?>

key может быть либо типа integer, либо типа string. value может быть любого типа.


object
Объекты
Для создания нового объекта, используйте выражение new,
создающее в переменной экземпляр класса:

<?php
class foo
{
    function do_foo()
    {
        echo "Doing foo."; 
    }
}

$bar = new foo;
$bar->do_foo();
?>



И, наконец, два специальных типа:
resource
Resource это специальная переменная, содержащая ссылку на внешний ресурс.
get_resource_type
Функция возвращает тип данного ресурса.
string get_resource_type ( resource $handle )

NULL
Переменная считается null, если:

ей была присвоена константа NULL.

ей еще не было присвоено никакого значения.

она была удалена с помощью unset().

Существует только одно значение типа null - регистро-независимая константа NULL.
<?php
$var = NULL;       
?>

is_null
Проверяет, является ли значение переменной равным NULL
bool is_null ( mixed $var )

unset
Удаляет переменную
void unset ( mixed $var [, mixed $... ] )
unset() удаляет перечисленные переменные.

псевдотипы:
mixed
говорит о том, что параметр может принимать много (но необязательно все) типов.
number
говорит о том, что параметр может быть либо integer, либо float.
callback
использовался в этой документации до того, как был введен тип callable в PHP 5.4. Он означает в точности то же самое.
void
void в качестве типа результата означает, что возвращенное значение бесполезно. 
void в списке параметров означает, что функция не принимает параметров.



И псевдопеременная $....

Если вы желаете проверить тип и значение определённого выражения, используйте var_dump().

<?php
var_dump((bool) "");        // bool(false)
var_dump((bool) 1);         // bool(true)
var_dump((bool) -2);        // bool(true)
var_dump((bool) "foo");     // bool(true)
var_dump((bool) 2.3e5);     // bool(true)
var_dump((bool) array(12)); // bool(true)
var_dump((bool) array());   // bool(false)
var_dump((bool) "false");   // bool(true)
?>

